#include "esp_camera.h"
#include "WiFi.h"
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "soc/soc.h"          // Disable brownout problems
#include "soc/rtc_cntl_reg.h" // Disable brownout problems
#include "driver/rtc_io.h"
#include <WebServer.h> // ESP32 WebServer 라이브러리 사용

// ESP32-S3 AI Camera PIN Map
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     5
#define Y9_GPIO_NUM       4
#define Y8_GPIO_NUM       6
#define Y7_GPIO_NUM       7
#define Y6_GPIO_NUM       14
#define Y5_GPIO_NUM       17
#define Y4_GPIO_NUM       21
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM       16
#define VSYNC_GPIO_NUM    1
#define HREF_GPIO_NUM     2
#define PCLK_GPIO_NUM     15
#define SIOD_GPIO_NUM  8
#define SIOC_GPIO_NUM  9

// Wi-Fi Credentials
const char* ssid = "2F-CR1_CR2";         // 실제 Wi-Fi SSID로 변경
const char* password = "WMS1348B2F"; // 실제 Wi-Fi 비밀번호로 변경

WebServer streamServer(81); // MJPEG 스트리밍 서버 포트 81번

static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=123456789000000000000987654321";
static const char* _STREAM_BOUNDARY = "\r\n--123456789000000000000987654321\r\n";
static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

void handleStream();
void handleNotFound();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  // 카메라 설정 최적화 (OV2640/OV5640 모두 호환)
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_VGA;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 18;
  config.fb_count = 1;

  if (config.pixel_format == PIXFORMAT_JPEG) {
    if (psramFound()) {
      config.jpeg_quality = 18;
      config.fb_count = 2;
      config.grab_mode = CAMERA_GRAB_LATEST;
    } else {
      config.frame_size = FRAMESIZE_QVGA;
      config.fb_location = CAMERA_FB_IN_DRAM;
      config.jpeg_quality = 20;
      config.fb_count = 1;
    }
  } else {
    config.frame_size = FRAMESIZE_240X240;
#if CONFIG_IDF_TARGET_ESP32S3
    config.fb_count = 2;
#endif
  }

#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif

  // 카메라 초기화
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
  Serial.println("카메라 초기화 성공");

  // 카메라 센서 설정
  sensor_t * s = esp_camera_sensor_get();
  if (s) {
    s->set_vflip(s, 1);  // 수직 뒤집기
    s->set_hmirror(s, 1);  // 수평 뒤집기
  }

  // Wi-Fi 연결
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  Serial.print("WiFi 연결 중...");
  int wifi_retry = 0;
  while (WiFi.status() != WL_CONNECTED && wifi_retry < 20) {
    delay(500);
    Serial.print(".");
    wifi_retry++;
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi 연결 실패");
    return;
  }
  Serial.println("\nWiFi 연결 성공");
  Serial.print("IP 주소: ");
  Serial.println(WiFi.localIP());

  // MJPEG 스트리밍 서버 핸들러 설정
  streamServer.on("/stream", HTTP_GET, handleStream);
  streamServer.onNotFound(handleNotFound);
  streamServer.begin();
  Serial.println("MJPEG 스트림 서버가 포트 81에서 시작됨 (/stream)");
}

void loop() {
  streamServer.handleClient();
  delay(1);
}

// 스트림 루프 최적화
void handleStream() {
 WiFiClient client = streamServer.client();
 if (!client.connected()) {
   return;
 }
 String response = "HTTP/1.1 200 OK\r\n";
 response += "Content-Type: " + String(_STREAM_CONTENT_TYPE) + "\r\n";
 response += "Connection: keep-alive\r\n";
 response += "Access-Control-Allow-Origin: *\r\n";
 response += "\r\n";
 client.print(response);
 while (client.connected()) {
   camera_fb_t * fb = esp_camera_fb_get();
   if (!fb) {
     Serial.println("Camera capture failed");
     delay(10);
     continue;
   }
   if(fb->format != PIXFORMAT_JPEG){
     esp_camera_fb_return(fb);
     continue;
   }
   client.print(_STREAM_BOUNDARY);
   char buf[128];
   sprintf(buf, _STREAM_PART, fb->len);
   client.print(buf);
   client.write(fb->buf, fb->len);
   client.print("\r\n");
   esp_camera_fb_return(fb);
 }
 Serial.println("Client disconnected from stream.");
}

void handleNotFound() {
 String message = "File Not Found\n\n";
 message += "URI: ";
 message += streamServer.uri();
 message += "\nMethod: ";
 message += (streamServer.method() == HTTP_GET) ? "GET" : "POST";
 message += "\nArguments: None\n";
 streamServer.send(404, "text/plain", message);
}
